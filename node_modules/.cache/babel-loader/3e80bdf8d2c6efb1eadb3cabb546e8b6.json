{"ast":null,"code":"var _jsxFileName = \"/Users/anil/test/src/components/slider/Slider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport \"./Slider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiRangeSlider = _ref => {\n  _s();\n\n  let {\n    min,\n    max,\n    onChange\n  } = _ref;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null);\n  const left_thumb = useRef(null);\n  const right_thumb = useRef(null);\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]);\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current && left_thumb.current) {\n      range.current.style.left = `${minPercent}%`;\n      left_thumb.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n  useEffect(() => {\n    onChange({\n      min: minVal,\n      max: maxVal\n    });\n  }, [minVal, maxVal, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      onChange: event => {\n        const value = Math.min(Number(event.target.value), maxVal - 1);\n        setMinVal(value);\n        minValRef.current = value;\n      },\n      className: \"thumb thumb--left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      label: maxVal,\n      onChange: event => {\n        const value = Math.max(Number(event.target.value), minVal + 1);\n        setMaxVal(value);\n        maxValRef.current = value;\n      },\n      className: \"thumb thumb--right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider_circle\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider_circle_inside\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [Math.round((maxVal - minVal) / 100 * 100 + 1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: \"slider__range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__left-value\",\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__right-value\",\n        children: maxVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: left_thumb,\n        className: \"left_thumb_value\",\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultiRangeSlider, \"ZlGcPOPp3lbvHu/TgHLLhJAS8FM=\");\n\n_c = MultiRangeSlider;\nexport default MultiRangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"sources":["/Users/anil/test/src/components/slider/Slider.js"],"names":["React","useCallback","useEffect","useState","useRef","MultiRangeSlider","min","max","onChange","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","left_thumb","right_thumb","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","event","Number","target"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport \"./Slider.css\";\n\nconst MultiRangeSlider = ({ min, max, onChange }) => {\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null);\n  const left_thumb = useRef(null);\n  const right_thumb = useRef(null);\n\n  const getPercent = useCallback(\n    (value) => Math.round(((value - min) / (max - min)) * 100),\n    [min, max]\n  );\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current && left_thumb.current) {\n      range.current.style.left = `${minPercent}%`;\n      left_thumb.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n\n  useEffect(() => {\n    onChange({ min: minVal, max: maxVal });\n  }, [minVal, maxVal, onChange]);\n\n  return (\n    <div className=\"container\">\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={minVal}\n        onChange={(event) => {\n          const value = Math.min(Number(event.target.value), maxVal - 1);\n          setMinVal(value);\n          minValRef.current = value;\n        }}\n        className=\"thumb thumb--left\"\n      />\n      \n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={maxVal}\n        label={maxVal}\n        onChange={(event) => {\n          const value = Math.max(Number(event.target.value), minVal + 1);\n          setMaxVal(value);\n          maxValRef.current = value;\n        }}\n        className=\"thumb thumb--right\"\n      />\n\n      <div className=\"slider\">\n        <div className=\"slider__track\" />\n        <div className=\"slider_circle\">\n            <div className=\"slider_circle_inside\">\n                <span>{Math.round((((maxVal-minVal)/100)*100)+1)}%</span>\n            </div>\n        </div>\n        <div ref={range} className=\"slider__range\" />\n        <div className=\"slider__left-value\">{minVal}</div>\n        <div className=\"slider__right-value\">{maxVal}</div>\n        <div ref={left_thumb}className=\"left_thumb_value\">{minVal}</div>\n        {/* <div ref={right_thumb}className=\"right_thumb-value\">{maxVal}</div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default MultiRangeSlider;\n"]},"metadata":{},"sourceType":"module"}