{"ast":null,"code":"var _jsxFileName = \"/Users/anil/test/src/components/slider/Slider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport \"./Slider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiRangeSlider = _ref => {\n  _s();\n\n  let {\n    min,\n    max,\n    onChange\n  } = _ref;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null);\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]);\n  useEffect(() => {\n    var right = document.getElementsByClassName('thumb--left');\n    var rect = right.getBoundingClientRect();\n    console.log(rect.top, rect.right, rect.bottom, rect.left);\n  });\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n  useEffect(() => {\n    onChange({\n      min: minVal,\n      max: maxVal\n    });\n  }, [minVal, maxVal, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      onChange: event => {\n        const value = Math.min(Number(event.target.value), maxVal - 1);\n        setMinVal(value);\n        minValRef.current = value;\n      },\n      className: \"thumb thumb--left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      label: maxVal,\n      onChange: event => {\n        const value = Math.max(Number(event.target.value), minVal + 1);\n        setMaxVal(value);\n        maxValRef.current = value;\n      },\n      className: \"thumb thumb--right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider_circle\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider_circle_inside\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [Math.round((maxVal - minVal) / 100 * 100 + 1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: \"slider__range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__left-value\",\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__right-value\",\n        children: maxVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultiRangeSlider, \"+khH+e9g1GInkhc39IXI+o7XQ0o=\");\n\n_c = MultiRangeSlider;\nexport default MultiRangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"sources":["/Users/anil/test/src/components/slider/Slider.js"],"names":["React","useCallback","useEffect","useState","useRef","MultiRangeSlider","min","max","onChange","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","right","document","getElementsByClassName","rect","getBoundingClientRect","console","log","top","bottom","left","minPercent","maxPercent","current","style","width","event","Number","target"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport \"./Slider.css\";\n\nconst MultiRangeSlider = ({ min, max, onChange }) => {\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null);\n\n  const getPercent = useCallback(\n    (value) => Math.round(((value - min) / (max - min)) * 100),\n    [min, max]\n  );\n\n  useEffect(() => {\n    var right = document.getElementsByClassName('thumb--left');\n    var rect = right.getBoundingClientRect();\n    console.log(rect.top, rect.right, rect.bottom, rect.left);\n  });\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n\n  useEffect(() => {\n    onChange({ min: minVal, max: maxVal });\n  }, [minVal, maxVal, onChange]);\n\n  return (\n    <div className=\"container\">\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={minVal}\n        onChange={(event) => {\n          const value = Math.min(Number(event.target.value), maxVal - 1);\n          setMinVal(value);\n          minValRef.current = value;\n        }}\n        className=\"thumb thumb--left\"\n      />\n      \n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={maxVal}\n        label={maxVal}\n        onChange={(event) => {\n          const value = Math.max(Number(event.target.value), minVal + 1);\n          setMaxVal(value);\n          maxValRef.current = value;\n        }}\n        className=\"thumb thumb--right\"\n      />\n\n      <div className=\"slider\">\n        <div className=\"slider__track\" />\n        <div className=\"slider_circle\">\n            <div className=\"slider_circle_inside\">\n                <span>{Math.round((((maxVal-minVal)/100)*100)+1)}%</span>\n            </div>\n        </div>\n        <div ref={range} className=\"slider__range\" />\n        <div className=\"slider__left-value\">{minVal}</div>\n        <div className=\"slider__right-value\">{maxVal}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiRangeSlider;\n"]},"metadata":{},"sourceType":"module"}